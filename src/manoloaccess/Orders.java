/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package manoloaccess;

import java.awt.Image;
import java.io.FileOutputStream;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import com.google.zxing.qrcode.QRCodeWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.BarcodeFormat;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.image.BufferedImage;
import javax.swing.ImageIcon;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.imageio.ImageIO;
/**
 *
 * @author Admin
 */
public class Orders extends javax.swing.JFrame {

    /**
     * Creates new form Orders
     */
    
     PreparedStatement ps = null;
    String path2 = null;
    Connection con;
    
    private int customerId;

    // Add this method
    public void setCustomerId(int customerId) {
        this.customerId = customerId;
    }
    
    public Orders() {
       initComponents();
        setLocationRelativeTo(null);
        
        String url = "jdbc:mysql://localhost:3306/db_ticketing";
        String user = "root";
        String pass = "";
        try {
            con = DriverManager.getConnection(url,user,pass);
            
        } catch (Exception ex) {
            System.out.println("Error : " + ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        backButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        OrdersTable = new javax.swing.JTable();
        cancelOrder = new javax.swing.JButton();
        ticketPanel = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        qrContainer = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        CustomerName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        QtyField = new javax.swing.JTextField();
        CustomerEmail = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        CustomerPhone = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        eventNameField = new javax.swing.JTextField();
        venueName = new javax.swing.JTextField();
        location = new javax.swing.JTextField();
        category = new javax.swing.JTextField();
        seatSectionField = new javax.swing.JTextField();
        ticketTypeField = new javax.swing.JTextField();
        price = new javax.swing.JTextField();
        ticketId = new javax.swing.JTextField();
        status = new javax.swing.JTextField();
        purchaseDate = new javax.swing.JTextField();
        paymentMethod = new javax.swing.JTextField();
        paymentRef = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        viewOrders = new javax.swing.JButton();
        printButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1700, 1000));

        jPanel1.setPreferredSize(new java.awt.Dimension(1700, 1000));

        jPanel2.setBackground(new java.awt.Color(153, 204, 255));

        backButton.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        backButton.setText("<");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(74, Short.MAX_VALUE)
                .addComponent(backButton)
                .addContainerGap())
        );

        OrdersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Event Name", "Ticket Type", "Seat Section", "Quantity", "Total Amount Paid"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        OrdersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OrdersTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(OrdersTable);

        cancelOrder.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        cancelOrder.setText("Cancel Order");
        cancelOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelOrderActionPerformed(evt);
            }
        });

        ticketPanel.setBackground(new java.awt.Color(255, 51, 51));
        ticketPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        qrContainer.setText("OR Code");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(qrContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(58, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(qrContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69))
        );

        jLabel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel2.setText("Name");

        CustomerName.setBackground(new java.awt.Color(255, 0, 0));
        CustomerName.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        CustomerName.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        CustomerName.setDisabledTextColor(new java.awt.Color(0, 0, 0));

        jLabel3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel3.setText("Email");

        QtyField.setBackground(new java.awt.Color(255, 0, 0));
        QtyField.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        QtyField.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        QtyField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QtyFieldActionPerformed(evt);
            }
        });

        CustomerEmail.setBackground(new java.awt.Color(255, 0, 0));
        CustomerEmail.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        CustomerEmail.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel4.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel4.setText("Phone");

        CustomerPhone.setBackground(new java.awt.Color(255, 0, 0));
        CustomerPhone.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        CustomerPhone.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel6.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel6.setText("Event");

        jLabel8.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel8.setText("Venue");

        jLabel9.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel9.setText("Location");

        jLabel10.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel10.setText("Category");

        jLabel11.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel11.setText("Seat Section");

        jLabel12.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel12.setText("Ticket Type");

        jLabel13.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel13.setText("Price");

        jLabel14.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel14.setText("Ticket ID");

        jLabel15.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel15.setText("Status");

        jLabel16.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel16.setText("Purchased on");

        jLabel17.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel17.setText("Payment Method");

        jLabel18.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel18.setText("Reference No.");

        eventNameField.setBackground(new java.awt.Color(255, 0, 0));
        eventNameField.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        eventNameField.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        venueName.setBackground(new java.awt.Color(255, 0, 0));
        venueName.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        venueName.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        location.setBackground(new java.awt.Color(255, 0, 0));
        location.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        location.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        category.setBackground(new java.awt.Color(255, 0, 0));
        category.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        category.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        seatSectionField.setBackground(new java.awt.Color(255, 0, 0));
        seatSectionField.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        seatSectionField.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        ticketTypeField.setBackground(new java.awt.Color(255, 0, 0));
        ticketTypeField.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        ticketTypeField.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        price.setBackground(new java.awt.Color(255, 0, 0));
        price.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        price.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        ticketId.setBackground(new java.awt.Color(255, 0, 0));
        ticketId.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        ticketId.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        status.setBackground(new java.awt.Color(255, 0, 0));
        status.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        status.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        purchaseDate.setBackground(new java.awt.Color(255, 0, 0));
        purchaseDate.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        purchaseDate.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        paymentMethod.setBackground(new java.awt.Color(255, 0, 0));
        paymentMethod.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        paymentMethod.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        paymentRef.setBackground(new java.awt.Color(255, 0, 0));
        paymentRef.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        paymentRef.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel7.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jLabel7.setText("Qty");

        javax.swing.GroupLayout ticketPanelLayout = new javax.swing.GroupLayout(ticketPanel);
        ticketPanel.setLayout(ticketPanelLayout);
        ticketPanelLayout.setHorizontalGroup(
            ticketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ticketPanelLayout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64)
                .addGroup(ticketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addGap(39, 39, 39)
                .addGroup(ticketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(CustomerName)
                    .addComponent(CustomerEmail, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CustomerPhone)
                    .addComponent(eventNameField)
                    .addComponent(venueName)
                    .addComponent(location)
                    .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addGroup(ticketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ticketPanelLayout.createSequentialGroup()
                        .addGroup(ticketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16)
                            .addComponent(jLabel17)
                            .addComponent(jLabel18))
                        .addGap(31, 31, 31)
                        .addGroup(ticketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(seatSectionField)
                            .addComponent(ticketTypeField)
                            .addComponent(price)
                            .addComponent(ticketId)
                            .addComponent(status)
                            .addComponent(purchaseDate)
                            .addComponent(paymentRef)
                            .addComponent(paymentMethod, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(ticketPanelLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(QtyField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(75, Short.MAX_VALUE))
        );
        ticketPanelLayout.setVerticalGroup(
            ticketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ticketPanelLayout.createSequentialGroup()
                .addContainerGap(77, Short.MAX_VALUE)
                .addGroup(ticketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ticketPanelLayout.createSequentialGroup()
                        .addGroup(ticketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(CustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ticketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(CustomerEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ticketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(CustomerPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(ticketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(eventNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ticketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(venueName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ticketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(location, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ticketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(ticketPanelLayout.createSequentialGroup()
                        .addGroup(ticketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ticketPanelLayout.createSequentialGroup()
                                .addGroup(ticketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11)
                                    .addComponent(seatSectionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(ticketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel12)
                                    .addComponent(ticketTypeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(ticketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel13)
                                    .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(ticketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel14)
                                    .addComponent(ticketId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(ticketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel15)
                                    .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel16))
                            .addComponent(purchaseDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ticketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(paymentMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ticketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel18)
                            .addComponent(paymentRef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(ticketPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(QtyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35))
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        viewOrders.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        viewOrders.setText("View Orders");
        viewOrders.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewOrdersActionPerformed(evt);
            }
        });

        printButton.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        printButton.setText("Print Ticket");
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(261, 261, 261)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(printButton)
                    .addComponent(ticketPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 277, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(viewOrders)
                .addGap(18, 18, 18)
                .addComponent(cancelOrder)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelOrder)
                    .addComponent(viewOrders))
                .addGap(25, 25, 25)
                .addComponent(ticketPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(printButton)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 903, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void viewOrdersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewOrdersActionPerformed
        // TODO add your handling code here:
      DefaultTableModel model = (DefaultTableModel) OrdersTable.getModel();
    model.setRowCount(0); // Clear existing rows

    int customerId = UserSession.getCustomerId();
    if (customerId <= 0) {
        JOptionPane.showMessageDialog(null, "No customer logged in. Please log in first.");
        return;
    }

    String fetchQuery = "SELECT e.name AS event_name, t.ticket_type, t.seat_section, o.quantity, o.total_amount " +
                       "FROM orders o " +
                       "JOIN order_tickets ot ON o.order_id = ot.order_id " +
                       "JOIN tickets t ON ot.ticket_id = t.ticket_id " +
                       "JOIN events e ON t.event_id = e.event_id " +
                       "WHERE o.customer_id = ? AND o.status = 'Paid' " +
                       "GROUP BY o.order_id, e.name, t.ticket_type, t.seat_section, o.quantity, o.total_amount";
    try {
        PreparedStatement pst = con.prepareStatement(fetchQuery);
        pst.setInt(1, customerId);
        ResultSet rs = pst.executeQuery();

        while (rs.next()) {
            // Debug output to check raw values
            Object quantityObj = rs.getObject("quantity");
            Object totalAmountObj = rs.getObject("total_amount");
            System.out.println("Raw quantity: " + quantityObj + ", Raw total_amount: " + totalAmountObj);

            // Handle null values with defaults
            Integer Quantity = (quantityObj != null) ? rs.getInt("quantity") : 0;
            Double totalAmount = (totalAmountObj != null) ? rs.getDouble("total_amount") : 0.0;

            // Additional debug to confirm processed values
            System.out.println("Processed quantity: " + Quantity + ", Processed total_amount: " + totalAmount);

            model.addRow(new Object[]{
                rs.getString("event_name"),    // Column 0 = Event Name
                rs.getString("ticket_type"),   // Column 1 = Ticket Type
                rs.getString("seat_section"),  // Column 2 = Seat Section
                Quantity,                      // Column 3 = Quantity (default 0 if null)
                totalAmount                    // Column 4 = Total Amount Paid (as Double, no formatting here)
            });
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        System.out.println("Exception details: " + e.getMessage());
    }
    }//GEN-LAST:event_viewOrdersActionPerformed

    private void OrdersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OrdersTableMouseClicked
        // TODO add your handling code here:
    int row = OrdersTable.getSelectedRow();
    if (row < 0 || con == null) return;
    
     int customerId = UserSession.getCustomerId();
    if (customerId <= 0) {
        JOptionPane.showMessageDialog(null, "No customer logged in. Please log in first.");
        return;
    }

    DefaultTableModel model = (DefaultTableModel) OrdersTable.getModel();
    String eventName = (String) model.getValueAt(row, 0); // Event Name
    String ticketType = (String) model.getValueAt(row, 1); // Ticket Type
    String seatSection = (String) model.getValueAt(row, 2); // Seat Section
    Integer Quantity = (Integer) model.getValueAt(row, 3); // Quantity
    Double totalAmount = (Double) model.getValueAt(row, 4); // Total Amount Paid

    // Debug log the input values
    System.out.println("Debug - customerId: " + customerId);
    System.out.println("Debug - eventName: " + eventName);
    System.out.println("Debug - ticketType: " + ticketType);
    System.out.println("Debug - seatSection: " + seatSection);
    System.out.println("Debug - quantity: " + Quantity);
    System.out.println("Debug - totalAmount: " + totalAmount);

    try {
        // Fetch order_id and details based on visible data
        String orderQuery = "SELECT o.order_id, o.order_date, o.payment_method, o.payment_reference, o.quantity, " +
                           "c.name, c.email, c.phone, v.name AS venue, v.location, e.category, t.price, t.ticket_id, " +
                           "'Paid' AS status, e.name AS event_name, t.ticket_type, t.seat_section " +
                           "FROM orders o " +
                           "JOIN customers c ON o.customer_id = c.customer_id " +
                           "JOIN order_tickets ot ON o.order_id = ot.order_id " +
                           "JOIN tickets t ON ot.ticket_id = t.ticket_id " +
                           "JOIN events e ON t.event_id = e.event_id " +
                           "JOIN venues v ON e.venue_id = v.venue_id " +
                           "WHERE o.customer_id = ? AND e.name = ? AND t.ticket_type = ? AND t.seat_section = ? " +
                           "AND o.quantity = ? AND o.total_amount = ? LIMIT 1";
        PreparedStatement pst = con.prepareStatement(orderQuery);
        pst.setInt(1, customerId);
        pst.setString(2, eventName);
        pst.setString(3, ticketType);
        pst.setString(4, seatSection);
        pst.setInt(5, Quantity);
        pst.setDouble(6, totalAmount);
        ResultSet rs = pst.executeQuery();

        // Debug log the query execution
        System.out.println("Debug - Executing query with parameters: " + customerId + ", " + eventName + ", " + ticketType + ", " + seatSection + ", " + Quantity + ", " + totalAmount);

        if (rs.next()) {
            // Populate fields
            CustomerName.setText(rs.getString("name"));
            CustomerEmail.setText(rs.getString("email"));
            CustomerPhone.setText(rs.getString("phone"));
            eventNameField.setText(rs.getString("event_name"));
            venueName.setText(rs.getString("venue"));
            location.setText(rs.getString("location"));
            category.setText(rs.getString("category"));
            seatSectionField.setText(rs.getString("seat_section"));
            ticketTypeField.setText(rs.getString("ticket_type"));
            price.setText(String.format("%.2f", rs.getDouble("price")));
            ticketId.setText(String.valueOf(rs.getInt("ticket_id")));
            status.setText(rs.getString("status"));
            purchaseDate.setText(rs.getString("order_date"));
            paymentMethod.setText(rs.getString("payment_method"));
            paymentRef.setText(rs.getString("payment_reference"));
            QtyField.setText(rs.getString("quantity"));
         // Generate unique QR code
int orderId = rs.getInt("order_id");
String paymentReference = rs.getString("payment_reference");
String qrData = "OrderID: " + orderId + ", Date: " + new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new java.util.Date()) + ", Ref: " + (paymentReference != null ? paymentReference : "N/A");
com.google.zxing.qrcode.QRCodeWriter qrCodeWriter = new com.google.zxing.qrcode.QRCodeWriter();
com.google.zxing.common.BitMatrix bitMatrix = qrCodeWriter.encode(qrData, com.google.zxing.BarcodeFormat.QR_CODE, 200, 200);
java.awt.image.BufferedImage qrImage = com.google.zxing.client.j2se.MatrixToImageWriter.toBufferedImage(bitMatrix);
java.awt.Image scaledImage = qrImage.getScaledInstance(qrContainer.getWidth(), qrContainer.getHeight(), java.awt.Image.SCALE_SMOOTH);
javax.swing.ImageIcon qrIcon = new javax.swing.ImageIcon(scaledImage);
qrContainer.setIcon(qrIcon);

// Debug log for QR code generation
System.out.println("QR Code generated for OrderID: " + orderId + " with data: " + qrData);
} else {
    JOptionPane.showMessageDialog(null, "No matching order details found.");
    qrContainer.setIcon(null); // Clear QR code if no match
}
} catch (Exception e) {
    JOptionPane.showMessageDialog(null, "Error fetching order details or generating QR code: " + e.getMessage());
    System.out.println("Exception: " + e.getMessage());
    qrContainer.setIcon(null); // Clear QR code on error
}
    }//GEN-LAST:event_OrdersTableMouseClicked

    private void QtyFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QtyFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_QtyFieldActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        UserInterface userint = new UserInterface();
        userint.setVisible(true);
        dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void cancelOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelOrderActionPerformed
        // TODO add your handling code here:
    int selectedRow = OrdersTable.getSelectedRow();
    if (selectedRow < 0 || con == null) {
        JOptionPane.showMessageDialog(null, "Please select an order to cancel or check database connection.");
        return;
    }

    DefaultTableModel model = (DefaultTableModel) OrdersTable.getModel();
    Object eventNameObj = model.getValueAt(selectedRow, 0); // Event Name
    Object ticketTypeObj = model.getValueAt(selectedRow, 1); // Ticket Type
    Object seatSectionObj = model.getValueAt(selectedRow, 2); // Seat Section
    Object quantityObj = model.getValueAt(selectedRow, 3); // Quantity
    Object totalAmountObj = model.getValueAt(selectedRow, 4); // Total Amount

    // Convert to appropriate types
    String eventName = eventNameObj != null ? eventNameObj.toString() : "";
    String ticketType = ticketTypeObj != null ? ticketTypeObj.toString() : "";
    String seatSection = seatSectionObj != null ? seatSectionObj.toString() : "";
    int quantity;
    double totalAmount;
    try {
        quantity = quantityObj != null ? Integer.parseInt(quantityObj.toString()) : 0;
        totalAmount = totalAmountObj != null ? Double.parseDouble(totalAmountObj.toString()) : 0.0;
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Invalid quantity or total amount format: " + e.getMessage());
        return;
    }

    // Fetch order_id from database based on table data with debug
    int orderId = -1;
    int customerId = UserSession.getCustomerId();
    try {
        System.out.println("Debug - Attempting to fetch order_id with customerId: " + customerId + 
                          ", eventName: " + eventName + ", ticketType: " + ticketType + 
                          ", seatSection: " + seatSection + ", quantity: " + quantity + 
                          ", totalAmount: " + totalAmount);
        String orderQuery = "SELECT o.order_id " +
                           "FROM orders o " +
                           "JOIN order_tickets ot ON o.order_id = ot.order_id " +
                           "JOIN tickets t ON ot.ticket_id = t.ticket_id " +
                           "JOIN events e ON t.event_id = e.event_id " +
                           "WHERE o.customer_id = ? AND e.name = ? AND t.ticket_type = ? AND t.seat_section = ? " +
                           "AND o.quantity = ? AND o.total_amount = ? AND o.status = 'Paid' LIMIT 1";
        try (PreparedStatement pst = con.prepareStatement(orderQuery)) {
            pst.setInt(1, customerId);
            pst.setString(2, eventName);
            pst.setString(3, ticketType);
            pst.setString(4, seatSection);
            pst.setInt(5, quantity);
            pst.setDouble(6, totalAmount);
            try (ResultSet rs = pst.executeQuery()) {
                if (rs.next()) {
                    orderId = rs.getInt("order_id");
                    System.out.println("Debug - Found order_id: " + orderId);
                } else {
                    JOptionPane.showMessageDialog(null, "No matching order found for cancellation. customerId: " + customerId);
                    return;
                }
            }
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error fetching order ID: " + e.getMessage());
        return;
    }

    if (orderId == -1) {
        JOptionPane.showMessageDialog(null, "Invalid order ID.");
        return;
    }

    // Confirm cancellation
    int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to cancel this order? (Order ID: " + orderId + ")", 
                                               "Confirm Cancellation", JOptionPane.YES_NO_OPTION);
    if (confirm != JOptionPane.YES_OPTION) {
        return;
    }

    try {
        con.setAutoCommit(false);

        // Update orders table to mark as cancelled with debug
        String updateOrderSql = "UPDATE orders SET status = 'Cancelled', cancelled_at = NOW() WHERE order_id = ? AND customer_id = ? AND status = 'Paid'";
        try (PreparedStatement updateOrderPs = con.prepareStatement(updateOrderSql)) {
            updateOrderPs.setInt(1, orderId);
            updateOrderPs.setInt(2, customerId);
            int updatedRows = updateOrderPs.executeUpdate();
            System.out.println("Debug - Updated rows in orders: " + updatedRows);
            if (updatedRows == 0) {
                JOptionPane.showMessageDialog(null, "Order not found or already cancelled. customerId: " + customerId + ", orderId: " + orderId);
                con.rollback();
                return;
            }
        }

        // Restore quantity to tickets table with debug
        String updateTicketSql = "UPDATE tickets t " +
                               "JOIN order_tickets ot ON t.ticket_id = ot.ticket_id " +
                               "SET t.tickets_left = t.tickets_left + ? " +
                               "WHERE ot.order_id = ?";
        try (PreparedStatement updateTicketPs = con.prepareStatement(updateTicketSql)) {
            updateTicketPs.setInt(1, quantity);
            updateTicketPs.setInt(2, orderId);
            int updatedTicketRows = updateTicketPs.executeUpdate();
            System.out.println("Debug - Updated rows in tickets: " + updatedTicketRows);
            if (updatedTicketRows == 0) {
                JOptionPane.showMessageDialog(null, "Failed to restore ticket quantity for orderId: " + orderId);
                con.rollback();
                return;
            }
        }

        con.commit();
        System.out.println("Debug - Transaction committed for orderId: " + orderId);
        JOptionPane.showMessageDialog(null, "Order " + orderId + " cancelled successfully.");

        // Remove the row from the table model
        model.removeRow(selectedRow);

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error cancelling order: " + e.getMessage());
        System.out.println("SQLException: " + e.getMessage());
        try {
            con.rollback();
        } catch (SQLException ex) {
            System.out.println("Rollback failed: " + ex.getMessage());
        }
    } finally {
        try {
            con.setAutoCommit(true);
        } catch (SQLException e) {
            System.out.println("Failed to reset auto-commit: " + e.getMessage());
        }
    }
    }//GEN-LAST:event_cancelOrderActionPerformed

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        // TODO add your handling code here:
        printButton.setVisible(false);
        cancelOrder.setVisible(false);
        viewOrders.setVisible(false);
        backButton.setVisible(false);
        OrdersTable.setVisible(false);
        jScrollPane1.setVisible(false);
        jPanel1.setBackground(Color.WHITE);
        jPanel2.setBackground(Color.WHITE);
        try{
        BufferedImage bi = new BufferedImage(jPanel1.getWidth(), jPanel1.getHeight(), BufferedImage.TYPE_INT_ARGB);
        jPanel1.paint(bi.getGraphics());
        String path = "C:\\Users\\Admin\\Desktop\\image.jpg";
        ImageIO.write(bi, "png", new File(path));
        Desktop.getDesktop().print(new File(path));
        
        Orders order = new Orders();
        order.setVisible(true);
        dispose();
        
        }catch(IOException ex){
            JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_printButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Orders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Orders().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CustomerEmail;
    private javax.swing.JTextField CustomerName;
    private javax.swing.JTextField CustomerPhone;
    private javax.swing.JTable OrdersTable;
    private javax.swing.JTextField QtyField;
    private javax.swing.JButton backButton;
    private javax.swing.JButton cancelOrder;
    private javax.swing.JTextField category;
    private javax.swing.JTextField eventNameField;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField location;
    private javax.swing.JTextField paymentMethod;
    private javax.swing.JTextField paymentRef;
    private javax.swing.JTextField price;
    private javax.swing.JButton printButton;
    private javax.swing.JTextField purchaseDate;
    private javax.swing.JLabel qrContainer;
    private javax.swing.JTextField seatSectionField;
    private javax.swing.JTextField status;
    private javax.swing.JTextField ticketId;
    private javax.swing.JPanel ticketPanel;
    private javax.swing.JTextField ticketTypeField;
    private javax.swing.JTextField venueName;
    private javax.swing.JButton viewOrders;
    // End of variables declaration//GEN-END:variables
}
