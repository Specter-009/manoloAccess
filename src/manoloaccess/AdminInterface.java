/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package manoloaccess;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Admin
 */
public class AdminInterface extends javax.swing.JFrame {

    /**
     * Creates new form AdminInterface
     */
    PreparedStatement ps = null;
    String path2 = null;
    Connection con;
    
    public AdminInterface() {
        initComponents();
        setLocationRelativeTo(null);
        
        String url = "jdbc:mysql://localhost:3306/db_ticketing";
        String user = "root";
        String pass = "";
        try {
            con = DriverManager.getConnection(url,user,pass);
            loadVenues();
            loadEventIDs();
        } catch (Exception ex) {
            System.out.println("Error : " + ex.getMessage());
        }
    }  
    
    private void loadVenues() {
        try {
            String query = "SELECT name FROM venues";
            ps = con.prepareStatement(query);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                VenueComboBox.addItem(rs.getString("name"));
            }
        } catch (Exception e) {
            System.out.println("Error loading venues: " + e.getMessage());
        }
    }
    
    
    
    private void loadEventIDs() {
    try {
        String sql = "SELECT event_id, name FROM events";
        PreparedStatement ps = con.prepareStatement(sql);
        ResultSet rs = ps.executeQuery();

        Event_Id.removeAllItems(); // clear old items
        while (rs.next()) {
            int eventId = rs.getInt("event_id");
            String eventName = rs.getString("name");
            Event_Id.addItem(eventId + " - " + eventName);
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Failed to load event IDs: " + e.getMessage());
    }
}

        

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton7 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        Events = new javax.swing.JPanel();
        UploadButton = new javax.swing.JButton();
        EventImageContainer = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        EventName = new javax.swing.JTextField();
        descriptionLabel = new javax.swing.JLabel();
        SubmitButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        DescriptionField = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        event_date = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl_admindata = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        VenueComboBox = new javax.swing.JComboBox();
        UpdateButton = new javax.swing.JButton();
        DeleteButton = new javax.swing.JButton();
        ViewButton = new javax.swing.JButton();
        SearchButton_Events = new javax.swing.JButton();
        SearchField_events = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        CategoryComboBox = new javax.swing.JComboBox();
        clearEvents = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        VenueName_Field = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        location_Field = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        Capacity_Spinner = new javax.swing.JSpinner();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbl_venuedata = new javax.swing.JTable();
        VenueSubmit_Button = new javax.swing.JButton();
        updateVenue = new javax.swing.JButton();
        deleteVenue = new javax.swing.JButton();
        clearVenues = new javax.swing.JButton();
        viewVenues = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        Event_Id = new javax.swing.JComboBox();
        Ticket_Type = new javax.swing.JComboBox();
        Seat_Section = new javax.swing.JComboBox();
        Ticket_Price = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        Total_Tickets = new javax.swing.JSpinner();
        jLabel14 = new javax.swing.JLabel();
        Tickets_Left = new javax.swing.JTextField();
        updateTickets = new javax.swing.JButton();
        Save_Button = new javax.swing.JButton();
        deleteTickets = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        Tickets_Table = new javax.swing.JTable();
        Viewbutton_tickets = new javax.swing.JButton();
        clearTickets = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tbl_ordersdata = new javax.swing.JTable();
        viewOrdersbutton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tbl_customerdata = new javax.swing.JTable();
        viewCustomerdata = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        LogoutButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        jButton7.setText("jButton7");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setPreferredSize(new java.awt.Dimension(900, 570));

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        jTabbedPane1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(1500, 800));

        Events.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        Events.setPreferredSize(new java.awt.Dimension(900, 570));

        UploadButton.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        UploadButton.setText("UPLOAD");
        UploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UploadButtonActionPerformed(evt);
            }
        });

        EventImageContainer.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel1.setText("Event Name");

        EventName.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        EventName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EventNameActionPerformed(evt);
            }
        });

        descriptionLabel.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        descriptionLabel.setText("Description");

        SubmitButton.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        SubmitButton.setText("SUBMIT");
        SubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitButtonActionPerformed(evt);
            }
        });

        DescriptionField.setColumns(20);
        DescriptionField.setRows(5);
        jScrollPane1.setViewportView(DescriptionField);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel2.setText("Date");

        event_date.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        event_date.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                event_dateActionPerformed(evt);
            }
        });

        jScrollPane2.setPreferredSize(new java.awt.Dimension(1000, 200));

        tbl_admindata.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        tbl_admindata.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "event_id", "venue_id", "name", "event_date", "description", "image_data", "category"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Byte.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tbl_admindata.setPreferredSize(new java.awt.Dimension(1000, 1000));
        tbl_admindata.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_admindataMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbl_admindata);

        jLabel3.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel3.setText("Venue");

        VenueComboBox.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        UpdateButton.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        UpdateButton.setText("UPDATE");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });

        DeleteButton.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        DeleteButton.setText("DELETE");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        ViewButton.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        ViewButton.setText("VIEW");
        ViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewButtonActionPerformed(evt);
            }
        });

        SearchButton_Events.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        SearchButton_Events.setText("SEARCH");
        SearchButton_Events.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButton_EventsActionPerformed(evt);
            }
        });

        SearchField_events.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchField_eventsActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel8.setText("Category");

        CategoryComboBox.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        CategoryComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Shows & Concerts", "Sports", "Tours & Attractions", "Corporate Events", "Family Events" }));
        CategoryComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CategoryComboBoxActionPerformed(evt);
            }
        });

        clearEvents.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        clearEvents.setText("CLEAR");
        clearEvents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearEventsActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel15.setText("YYYY-MM-DD HH:MM:SS");

        javax.swing.GroupLayout EventsLayout = new javax.swing.GroupLayout(Events);
        Events.setLayout(EventsLayout);
        EventsLayout.setHorizontalGroup(
            EventsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EventsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EventsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 992, Short.MAX_VALUE)
                    .addGroup(EventsLayout.createSequentialGroup()
                        .addComponent(ViewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(SearchField_events, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SearchButton_Events)
                        .addContainerGap())
                    .addGroup(EventsLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(EventsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(EventsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(EventsLayout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(18, 18, 18)
                                    .addComponent(EventName, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(EventsLayout.createSequentialGroup()
                                    .addGroup(EventsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(descriptionLabel)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel3))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(EventsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel15)
                                        .addGroup(EventsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(VenueComboBox, 0, 365, Short.MAX_VALUE)
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                                            .addComponent(event_date, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                                            .addComponent(SubmitButton)
                                            .addComponent(CategoryComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                            .addComponent(jLabel8))
                        .addGroup(EventsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(EventsLayout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(UpdateButton)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(EventsLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(EventsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(DeleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                                    .addComponent(clearEvents, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(EventsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(UploadButton)
                                    .addComponent(EventImageContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(98, 98, 98))))))
        );
        EventsLayout.setVerticalGroup(
            EventsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EventsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EventsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(EventsLayout.createSequentialGroup()
                        .addComponent(EventImageContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(UploadButton))
                    .addGroup(EventsLayout.createSequentialGroup()
                        .addGroup(EventsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(EventName, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(UpdateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(EventsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(EventsLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(EventsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8)
                                    .addComponent(CategoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(21, 21, 21)
                                .addGroup(EventsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(EventsLayout.createSequentialGroup()
                                        .addComponent(VenueComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(24, 24, 24)
                                        .addGroup(EventsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(event_date, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel2)))
                                    .addGroup(EventsLayout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(descriptionLabel))))
                            .addGroup(EventsLayout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(DeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(clearEvents)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel15)
                .addGap(18, 18, 18)
                .addComponent(SubmitButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addGroup(EventsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SearchButton_Events)
                    .addComponent(SearchField_events, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ViewButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );

        jTabbedPane1.addTab("Events", Events);

        jLabel5.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel5.setText("Venue name");

        VenueName_Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VenueName_FieldActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel6.setText("Location");

        jLabel7.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel7.setText("Capacity");

        tbl_venuedata.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "venue_id", "name", "location", "capacity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tbl_venuedata.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_venuedataMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tbl_venuedata);

        VenueSubmit_Button.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        VenueSubmit_Button.setText("SUBMIT");
        VenueSubmit_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VenueSubmit_ButtonActionPerformed(evt);
            }
        });

        updateVenue.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        updateVenue.setText("UPDATE");
        updateVenue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateVenueActionPerformed(evt);
            }
        });

        deleteVenue.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        deleteVenue.setText("DELETE");
        deleteVenue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteVenueActionPerformed(evt);
            }
        });

        clearVenues.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        clearVenues.setText("CLEAR");
        clearVenues.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearVenuesActionPerformed(evt);
            }
        });

        viewVenues.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        viewVenues.setText("VIEW");
        viewVenues.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewVenuesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(viewVenues)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 899, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel5)
                                .addComponent(jLabel6)
                                .addComponent(jLabel7))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(VenueSubmit_Button)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(VenueName_Field)
                                            .addComponent(location_Field, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE))
                                        .addComponent(Capacity_Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(41, 41, 41)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(updateVenue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(deleteVenue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(clearVenues, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))))
                .addContainerGap(70, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(VenueName_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateVenue))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(location_Field, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteVenue))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Capacity_Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearVenues))
                .addGap(18, 18, 18)
                .addComponent(VenueSubmit_Button)
                .addGap(26, 26, 26)
                .addComponent(viewVenues)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(228, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Venues", jPanel2);

        jLabel9.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel9.setText("Event_id");

        jLabel10.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel10.setText("Price");

        jLabel11.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel11.setText("Ticket Type");

        jLabel12.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel12.setText("Seat Section");

        Event_Id.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        Ticket_Type.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        Ticket_Type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Regular", "VIP", "VVIP", "Student", "Senior Citizen", "Complimentary" }));

        Seat_Section.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        Seat_Section.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Front Row", "Center", "Side Wing", "Standing Area", "Near Stage", "Middle", "Back", "Standing Only" }));

        Ticket_Price.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        jLabel13.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel13.setText("Total Tickets");

        jLabel14.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel14.setText("Tickets Left");

        Tickets_Left.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        Tickets_Left.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Tickets_LeftActionPerformed(evt);
            }
        });

        updateTickets.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        updateTickets.setText("UPDATE");
        updateTickets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateTicketsActionPerformed(evt);
            }
        });

        Save_Button.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        Save_Button.setText("SUBMIT");
        Save_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Save_ButtonActionPerformed(evt);
            }
        });

        deleteTickets.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        deleteTickets.setText("DELETE");
        deleteTickets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteTicketsActionPerformed(evt);
            }
        });

        Tickets_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ticket_id", "event_id", "ticket_type", "seat_section", "price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        Tickets_Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Tickets_TableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(Tickets_Table);

        Viewbutton_tickets.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        Viewbutton_tickets.setText("View");
        Viewbutton_tickets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Viewbutton_ticketsActionPerformed(evt);
            }
        });

        clearTickets.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        clearTickets.setText("CLEAR");
        clearTickets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearTicketsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Viewbutton_tickets)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 974, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel11)
                                .addComponent(jLabel12)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel10))
                                .addComponent(jLabel9)
                                .addComponent(jLabel14))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel4Layout.createSequentialGroup()
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(Seat_Section, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(Ticket_Type, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(Ticket_Price)
                                            .addComponent(Total_Tickets))
                                        .addComponent(Event_Id, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(64, 64, 64)
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(updateTickets, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(deleteTickets, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(clearTickets, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(Save_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Tickets_Left, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(Event_Id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(Ticket_Type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(Seat_Section, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(updateTickets)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteTickets)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearTickets)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(Ticket_Price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(Total_Tickets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(Tickets_Left, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(Save_Button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Viewbutton_tickets)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(187, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Tickets", jPanel4);

        tbl_ordersdata.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "order_id", "customer_id", "order_date", "total_amount", "quantity", "status", "payment_method", "payment_reference", "cancelled_at"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane6.setViewportView(tbl_ordersdata);

        viewOrdersbutton.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        viewOrdersbutton.setText("VIEW");
        viewOrdersbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewOrdersbuttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 982, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(viewOrdersbutton)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(viewOrdersbutton)
                .addContainerGap(432, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Order Details", jPanel5);

        tbl_customerdata.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "customer_id", "name", "email", "phone", "username", "password", "created_at"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane5.setViewportView(tbl_customerdata);

        viewCustomerdata.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        viewCustomerdata.setText("VIEW");
        viewCustomerdata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewCustomerdataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 982, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(viewCustomerdata)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(viewCustomerdata)
                .addContainerGap(428, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Customers Details", jPanel6);

        jPanel7.setBackground(new java.awt.Color(0, 153, 204));

        LogoutButton.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        LogoutButton.setText("LOGOUT");
        LogoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogoutButtonActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(240, 240, 240));
        jLabel4.setText("Administration");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(LogoutButton)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LogoutButton)
                    .addComponent(jLabel4))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1186, Short.MAX_VALUE)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1186, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 864, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LogoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogoutButtonActionPerformed
        // TODO add your handling code here:
        loginPage login = new loginPage();
        login.setVisible(true);
        dispose();
    }//GEN-LAST:event_LogoutButtonActionPerformed

    private void Viewbutton_ticketsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Viewbutton_ticketsActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) Tickets_Table.getModel();
        model.setRowCount(0); // Clear existing rows

        String fetchQuery = "SELECT ticket_id, event_id, ticket_type, seat_section, price FROM tickets";
        try {
            PreparedStatement pst = con.prepareStatement(fetchQuery);
            ResultSet rs = pst.executeQuery();

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("ticket_id"),
                    rs.getInt("event_id"), // If NULL, will show as blank
                    rs.getString("ticket_type"),
                    rs.getString("seat_section"),
                    rs.getBigDecimal("price")
                });
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }
    }//GEN-LAST:event_Viewbutton_ticketsActionPerformed

    private void Tickets_TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Tickets_TableMouseClicked
        // TODO add your handling code here:
        int r = Tickets_Table.getSelectedRow();
        String click = Tickets_Table.getModel().getValueAt(r, 0).toString(); // ticket_id
        String sql = "SELECT * FROM tickets WHERE ticket_id = ?";

        try {
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setString(1, click);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                int ticketid = rs.getInt("ticket_id");
                int eventid = rs.getInt("event_id");
                String ticketType = rs.getString("ticket_type");
                String seatSection = rs.getString("seat_section");
                double price = rs.getDouble("price");
                int quantity = rs.getInt("quantity");
                int ticketsLeft = rs.getInt("tickets_left");

                Ticket_Type.setSelectedItem(ticketType);
                Seat_Section.setSelectedItem(seatSection);
                Ticket_Price.setText(String.format("%.2f", price));
                Total_Tickets.setValue(quantity);
                Tickets_Left.setText(String.valueOf(ticketsLeft));

                // Load all events into the combo box
                String eventsql = "SELECT event_id, name FROM events";
                PreparedStatement eventps = con.prepareStatement(eventsql);
                ResultSet eventrs = eventps.executeQuery();

                Event_Id.removeAllItems(); // Clear old items
                String selectedEvent = null;

                while (eventrs.next()) {
                    int eid = eventrs.getInt("event_id");
                    String ename = eventrs.getString("name");
                    String item = eid + " - " + ename;
                    Event_Id.addItem(item);

                    // Save the one that matches the ticket's event_id
                    if (eid == eventid) {
                        selectedEvent = item;
                    }
                }

                // Now select the correct one
                if (selectedEvent != null) {
                    Event_Id.setSelectedItem(selectedEvent);
                }
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error loading ticket: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_Tickets_TableMouseClicked

    private void Save_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Save_ButtonActionPerformed
        // TODO add your handling code here:
        try {
            // Get input values
            String selected = Event_Id.getSelectedItem().toString();
            int eventId = Integer.parseInt(selected.split(" - ")[0]);
            String ticketType = Ticket_Type.getSelectedItem().toString();
            String seatSection = Seat_Section.getSelectedItem().toString();
            double price = Double.parseDouble(Ticket_Price.getText());
            int quantity = (int) Total_Tickets.getValue();
            int ticketsLeft = quantity;
            int isSold = (ticketsLeft == 0) ? 1 : 0;

            // Insert query
            String sql = "INSERT INTO tickets (event_id, price, is_sold, ticket_type, seat_section, quantity, tickets_left) "
            + "VALUES (?, ?, ?, ?, ?, ?, ?)";
            String fetchQuery = "SELECT ticket_id, event_id, ticket_type, seat_section, price FROM tickets";

            // Execute insert
            try (PreparedStatement ps = con.prepareStatement(sql)) {
                ps.setInt(1, eventId);
                ps.setDouble(2, price);
                ps.setInt(3, isSold);
                ps.setString(4, ticketType);
                ps.setString(5, seatSection);
                ps.setInt(6, quantity);
                ps.setInt(7, ticketsLeft);

                int rows = ps.executeUpdate();

                if (rows > 0) {
                    JOptionPane.showMessageDialog(null, "Ticket saved successfully.");

                    Event_Id.setSelectedIndex(-1);
                    Ticket_Type.setSelectedIndex(-1);
                    Seat_Section.setSelectedIndex(-1);
                    Ticket_Price.setText("0.00");
                    Total_Tickets.setValue(0);

                    // Refresh table

                } else {
                    JOptionPane.showMessageDialog(null, "Failed to save ticket.");
                }

                // REFRESH JTable
                DefaultTableModel model = (DefaultTableModel) Tickets_Table.getModel();
                model.setRowCount(0); // Clear existing rows

                PreparedStatement pst = con.prepareStatement(fetchQuery);
                ResultSet rs = pst.executeQuery();

                while (rs.next()) {
                    model.addRow(new Object[]{
                        rs.getInt("ticket_id"),
                        rs.getInt("event_id"), // If NULL, will show as blank
                        rs.getString("ticket_type"),
                        rs.getString("seat_section"),
                        rs.getBigDecimal("price")
                    });
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error refreshing table: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_Save_ButtonActionPerformed

    private void updateTicketsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateTicketsActionPerformed
        // TODO add your handling code here:
        int selectedRow = Tickets_Table.getSelectedRow();
    if (selectedRow >= 0) {
        String ticketId = Tickets_Table.getValueAt(selectedRow, 0).toString(); // ticket_id from selected row

        // Only get editable fields
        String ticketType = (String) Ticket_Type.getSelectedItem();
        String seatSection = (String) Seat_Section.getSelectedItem();

        String updateQuery = "UPDATE tickets SET ticket_type = ?, seat_section = ? WHERE ticket_id = ?";

        try {
            PreparedStatement pst = con.prepareStatement(updateQuery);
            pst.setString(1, ticketType);
            pst.setString(2, seatSection);
            pst.setString(3, ticketId);
            pst.executeUpdate();

            JOptionPane.showMessageDialog(null, "Ticket type and seat section updated successfully!");

            // Refresh table data
            DefaultTableModel model = (DefaultTableModel) Tickets_Table.getModel();
            model.setRowCount(0);

            String fetchQuery = "SELECT * FROM tickets";
            PreparedStatement pstFetch = con.prepareStatement(fetchQuery);
            ResultSet rs = pstFetch.executeQuery();

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("ticket_id"),
                    rs.getInt("event_id"),
                    rs.getString("ticket_type"),
                    rs.getString("seat_section"),
                    rs.getDouble("price")
                });
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error updating ticket: " + e.getMessage());
            e.printStackTrace();
        }

    } else {
        JOptionPane.showMessageDialog(null, "Please select a row to update.");
    }

    }//GEN-LAST:event_updateTicketsActionPerformed

    private void Tickets_LeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Tickets_LeftActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Tickets_LeftActionPerformed

    private void viewVenuesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewVenuesActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tbl_venuedata.getModel();
        model.setRowCount(0);

        String fetchQuery = "SELECT venue_id, name, location, capacity FROM venues";

        try {
            PreparedStatement pst = con.prepareStatement(fetchQuery);
            ResultSet rs = pst.executeQuery();

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getInt("venue_id"),
                    rs.getString("name"),
                    rs.getString("location"),
                    rs.getInt("capacity")
                });
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error loading venue data: " + e.getMessage());
        }
    }//GEN-LAST:event_viewVenuesActionPerformed

    private void clearVenuesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearVenuesActionPerformed
        // TODO add your handling code here:
        VenueName_Field.setText("");
        location_Field.setText("");
        Capacity_Spinner.setValue(0);
    }//GEN-LAST:event_clearVenuesActionPerformed

    private void deleteVenueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteVenueActionPerformed
        // TODO add your handling code here:
        int selectedRow = tbl_venuedata.getSelectedRow();
        if (selectedRow >= 0) {
            String venueId = tbl_venuedata.getValueAt(selectedRow, 0).toString();

            int confirm = JOptionPane.showConfirmDialog(null,
                "Are you sure you want to delete this venue?",
                "Confirm Delete",
                JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                String deleteQuery = "DELETE FROM venues WHERE venue_id = ?";

                try {
                    // DELETE data
                    PreparedStatement pstDelete = con.prepareStatement(deleteQuery);
                    pstDelete.setString(1, venueId);
                    pstDelete.executeUpdate();

                    JOptionPane.showMessageDialog(null, "Venue deleted successfully!");

                    // REFRESH JTable
                    DefaultTableModel model = (DefaultTableModel) tbl_venuedata.getModel();
                    model.setRowCount(0); // Clear existing rows

                    String fetchQuery = "SELECT * FROM venues";
                    PreparedStatement pst = con.prepareStatement(fetchQuery);
                    ResultSet rs = pst.executeQuery();

                    while (rs.next()) {
                        model.addRow(new Object[]{
                            rs.getString("venue_id"),
                            rs.getString("name"),
                            rs.getString("location"),
                            rs.getString("capacity")
                        });
                    }

                    // Clear fields after deletion
                    VenueName_Field.setText("");
                    location_Field.setText("");
                    Capacity_Spinner.setValue(0);

                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Error deleting venue: " + e.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to delete.");
        }
    }//GEN-LAST:event_deleteVenueActionPerformed

    private void updateVenueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateVenueActionPerformed
        // TODO add your handling code here:
        int selectedRow = tbl_venuedata.getSelectedRow();
        if (selectedRow >= 0) {
            String venueId = tbl_venuedata.getValueAt(selectedRow, 0).toString(); // venue_id from selected row
            String newName = VenueName_Field.getText();
            String newLocation = location_Field.getText();
            int newCapacity = (int) Capacity_Spinner.getValue();

            String updateQuery = "UPDATE venues SET name = ?, location = ?, capacity = ? WHERE venue_id = ?";

            try {
                PreparedStatement pst = con.prepareStatement(updateQuery);
                pst.setString(1, newName);
                pst.setString(2, newLocation);
                pst.setInt(3, newCapacity);
                pst.setString(4, venueId);
                pst.executeUpdate();

                // Clear inputs after update
                VenueName_Field.setText("");
                location_Field.setText("");
                Capacity_Spinner.setValue(0);

                JOptionPane.showMessageDialog(null, "Venue updated successfully!");

                // Refresh table
                DefaultTableModel model = (DefaultTableModel) tbl_venuedata.getModel();
                model.setRowCount(0);

                String fetchQuery = "SELECT * FROM venues";
                PreparedStatement pstFetch = con.prepareStatement(fetchQuery);
                ResultSet rs = pstFetch.executeQuery();

                while (rs.next()) {
                    model.addRow(new Object[] {
                        rs.getString("venue_id"),
                        rs.getString("name"),
                        rs.getString("location"),
                        rs.getString("capacity")
                    });
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error updating venue: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to update.");
        }
    }//GEN-LAST:event_updateVenueActionPerformed

    private void VenueSubmit_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VenueSubmit_ButtonActionPerformed
        // TODO add your handling code here:
        String venuename = VenueName_Field.getText();
        String location = location_Field.getText();
        int capacity = (int) Capacity_Spinner.getValue(); // Format: YYYY-MM-DD HH:MM:SS

        String insertQuery = "INSERT INTO venues (name, location, capacity) VALUES (?, ?, ?)";
        String fetchQuery = "SELECT * FROM venues";

        try {
            // INSERT data
            PreparedStatement pst = con.prepareStatement(insertQuery);
            pst.setString(1, venuename);
            pst.setString(2, location);
            pst.setInt(3, capacity);
            pst.executeUpdate();

            // CLEAR inputs
            VenueName_Field.setText("");
            location_Field.setText("");
            Capacity_Spinner.setValue(0);

            JOptionPane.showMessageDialog(null, "Data saved successfully!");

            // REFRESH JTable
            DefaultTableModel model = (DefaultTableModel) tbl_venuedata.getModel();
            model.setRowCount(0); // Clear existing rows

            PreparedStatement pstfetch = con.prepareStatement(fetchQuery);
            ResultSet rs = pstfetch.executeQuery();

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getString("venue_id"),
                    rs.getString("name"), // If NULL, will show as blank
                    rs.getString("location"),
                    rs.getString("capacity")
                });
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }
    }//GEN-LAST:event_VenueSubmit_ButtonActionPerformed

    private void tbl_venuedataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_venuedataMouseClicked
        // TODO add your handling code here
        int r = tbl_venuedata.getSelectedRow();
        String click = tbl_venuedata.getModel().getValueAt(r, 0).toString(); // event_id
        String sql = "SELECT * FROM venues WHERE venue_id = ?";

        try {
            PreparedStatement ps = con.prepareStatement(sql); // Prepare first
            ps.setString(1, click);
            ResultSet rs = ps.executeQuery(); // Then execute

            if (rs.next()) {
                String venueid = rs.getString("venue_id");
                String name = rs.getString("name"); // Optional
                String location = rs.getString("location");
                int capacity = rs.getInt("capacity");

                // Set values to fields
                VenueName_Field.setText(name);
                location_Field.setText(location);
                Capacity_Spinner.setValue(capacity);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }
    }//GEN-LAST:event_tbl_venuedataMouseClicked

    private void VenueName_FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VenueName_FieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_VenueName_FieldActionPerformed

    private void clearEventsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearEventsActionPerformed
        // TODO add your handling code here:
        EventName.setText("");
        DescriptionField.setText("");
        event_date.setText("");

        // Clear image preview
        EventImageContainer.setIcon(null);

        // Reset combo boxes to no selection
        VenueComboBox.setSelectedIndex(-1);
        CategoryComboBox.setSelectedIndex(-1);
    }//GEN-LAST:event_clearEventsActionPerformed

    private void CategoryComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CategoryComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CategoryComboBoxActionPerformed

    private void SearchField_eventsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchField_eventsActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_SearchField_eventsActionPerformed

    private void SearchButton_EventsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButton_EventsActionPerformed
        // TODO add your handling code here:
        String searchQuery = SearchField_events.getText();
        String sql = "SELECT * FROM events WHERE name LIKE ?";

        try {
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setString(1, "%" + searchQuery + "%");
            ResultSet rs = ps.executeQuery();

            DefaultTableModel model = (DefaultTableModel) tbl_admindata.getModel();
            model.setRowCount(0); // Clear existing rows

            while (rs.next()) {
                String eventid = rs.getString("event_id");
                String venueid = rs.getString("venue_id");
                String name = rs.getString("name");
                String eventdate = rs.getString("event_date");
                String desc = rs.getString("description");
                String category = rs.getString("category");

                model.addRow(new Object[]{eventid, venueid, name, eventdate, desc, category});
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }
    }//GEN-LAST:event_SearchButton_EventsActionPerformed

    private void ViewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewButtonActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tbl_admindata.getModel();
        model.setRowCount(0); // Clear existing rows

        String fetchQuery = "SELECT * FROM events";
        try {
            PreparedStatement pst = con.prepareStatement(fetchQuery);
            ResultSet rs = pst.executeQuery();

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getString("event_id"),
                    rs.getString("venue_id"), // If NULL, will show as blank
                    rs.getString("name"),
                    rs.getString("event_date"),
                    rs.getString("description"),
                    rs.getString("image_data"), // Optional: could display as placeholder
                    rs.getString("category")
                });
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }
    }//GEN-LAST:event_ViewButtonActionPerformed

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = tbl_admindata.getSelectedRow();
        if (selectedRow >= 0) {
            String eventId = tbl_admindata.getValueAt(selectedRow, 0).toString();

            String deleteQuery = "DELETE FROM events WHERE event_id = ?";

            try {
                // DELETE data
                PreparedStatement pstDelete = con.prepareStatement(deleteQuery);
                pstDelete.setString(1, eventId);
                pstDelete.executeUpdate();

                JOptionPane.showMessageDialog(null, "Data deleted successfully!");

                // REFRESH JTable
                DefaultTableModel model = (DefaultTableModel) tbl_admindata.getModel();
                model.setRowCount(0); // Clear existing rows

                String fetchQuery = "SELECT * FROM events";
                PreparedStatement pst = con.prepareStatement(fetchQuery);
                ResultSet rs = pst.executeQuery();

                while (rs.next()) {
                    model.addRow(new Object[]{
                        rs.getString("event_id"),
                        rs.getString("venue_id"), // If NULL, will show as blank
                        rs.getString("name"),
                        rs.getString("event_date"),
                        rs.getString("description"),
                        rs.getString("image_data"), // Optional: could display as placeholder
                        rs.getString("category")
                    });
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to delete.");
        }
    }//GEN-LAST:event_DeleteButtonActionPerformed

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = tbl_admindata.getSelectedRow();
        if (selectedRow >= 0) {
            String eventId = tbl_admindata.getValueAt(selectedRow, 0).toString();
            String eventname = EventName.getText();
            String selectedVenue = (String) VenueComboBox.getSelectedItem();
            String desc = DescriptionField.getText();
            String date = event_date.getText(); // Format: YYYY-MM-DD HH:MM:SS
            String selectedCategory = (String) CategoryComboBox.getSelectedItem();

            String updateQuery = "UPDATE events SET venue_id = ?, name = ?, description = ?, event_date = ?, image_data = ?, category = ? WHERE event_id = ?";

            try {
                // Get venue_id from venue name
                String venueIdQuery = "SELECT venue_id FROM venues WHERE name = ?";
                PreparedStatement pstVenue = con.prepareStatement(venueIdQuery);
                pstVenue.setString(1, selectedVenue);
                ResultSet rsVenue = pstVenue.executeQuery();
                String venueId = null;

                if (rsVenue.next()) {
                    venueId = rsVenue.getString("venue_id");
                }

                PreparedStatement pstUpdate = con.prepareStatement(updateQuery);
                pstUpdate.setString(1, venueId);
                pstUpdate.setString(2, eventname);
                pstUpdate.setString(3, desc);
                pstUpdate.setString(4, date);

                // ✅ Image update fix
                InputStream is = null;
                if (path2 != null && !path2.isEmpty()) {
                    is = new FileInputStream(new File(path2));
                    pstUpdate.setBlob(5, is);
                } else {
                    String oldImageQuery = "SELECT image_data FROM events WHERE event_id = ?";
                    PreparedStatement pstOldImg = con.prepareStatement(oldImageQuery);
                    pstOldImg.setString(1, eventId);
                    ResultSet rsOldImg = pstOldImg.executeQuery();
                    if (rsOldImg.next()) {
                        is = rsOldImg.getBlob("image_data").getBinaryStream();
                        pstUpdate.setBlob(5, is);
                    } else {
                        pstUpdate.setNull(5, java.sql.Types.BLOB);
                    }
                }

                pstUpdate.setString(6, selectedCategory);
                pstUpdate.setString(7, eventId);
                pstUpdate.executeUpdate();

                // Clear inputs
                EventName.setText("");
                DescriptionField.setText("");
                event_date.setText("");
                EventImageContainer.setIcon(null);
                VenueComboBox.setSelectedIndex(-1);
                CategoryComboBox.setSelectedIndex(-1);

                JOptionPane.showMessageDialog(null, "Data updated successfully!");

                // Refresh table
                DefaultTableModel model = (DefaultTableModel) tbl_admindata.getModel();
                model.setRowCount(0);

                String fetchQuery = "SELECT * FROM events";
                PreparedStatement pst = con.prepareStatement(fetchQuery);
                ResultSet rs = pst.executeQuery();

                while (rs.next()) {
                    model.addRow(new Object[]{
                        rs.getString("event_id"),
                        rs.getString("venue_id"),
                        rs.getString("name"),
                        rs.getString("event_date"),
                        rs.getString("description"),
                        rs.getString("image_data"),
                        rs.getString("category")
                    });
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to update.");
        }

    }//GEN-LAST:event_UpdateButtonActionPerformed

    private void tbl_admindataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_admindataMouseClicked
        // TODO add your handling code here:
        int r = tbl_admindata.getSelectedRow();
        String click = tbl_admindata.getModel().getValueAt(r, 0).toString(); // event_id
        String sql = "SELECT * FROM events WHERE event_id = ?";

        try {
            PreparedStatement ps = con.prepareStatement(sql); // Prepare first
            ps.setString(1, click);
            ResultSet rs = ps.executeQuery(); // Then execute

            if (rs.next()) {
                String eventid = rs.getString("event_id");
                String venueid = rs.getString("venue_id"); // Optional
                String name = rs.getString("name");
                String eventdate = rs.getString("event_date");
                String desc = rs.getString("description");
                Blob image = rs.getBlob("image_data");
                String category = rs.getString("category");

                // Convert image Blob to byte array
                byte[] bytea = image.getBytes(1, (int) image.length());

                // Optional: Save image temporarily if needed
                String path = "C:\\Users\\Admin\\Documents\\NetBeansProjects\\manoloAccess\\src\\mysqltonetbeans\\images\\img.jpg";
                FileOutputStream fos = new FileOutputStream(path);
                fos.write(bytea);
                fos.close();

                // Set values to fields
                EventName.setText(name);
                DescriptionField.setText(desc);
                event_date.setText(eventdate);
                CategoryComboBox.setSelectedItem(category);

                // Display image
                ImageIcon icon = new ImageIcon(bytea);
                Image imageScaled = icon.getImage().getScaledInstance(EventImageContainer.getWidth(), EventImageContainer.getHeight(), Image.SCALE_SMOOTH);
                EventImageContainer.setIcon(new ImageIcon(imageScaled));

                // Set venue name in combo box
                String venueSql = "SELECT name FROM venues WHERE venue_id = ?";
                PreparedStatement venuePs = con.prepareStatement(venueSql);
                venuePs.setString(1, venueid);
                ResultSet venueRs = venuePs.executeQuery();

                if (venueRs.next()) {
                    String venueName = venueRs.getString("name");
                    VenueComboBox.setSelectedItem(venueName);
                }

            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }
    }//GEN-LAST:event_tbl_admindataMouseClicked

    private void event_dateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_event_dateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_event_dateActionPerformed

    private void SubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitButtonActionPerformed
        // TODO add your handling code here:
        String eventname = EventName.getText();
        String desc = DescriptionField.getText();
        String date = event_date.getText();
        String selectedVenue = (String) VenueComboBox.getSelectedItem();
        String selectedCategory = (String) CategoryComboBox.getSelectedItem();

        String venueIdQuery = "SELECT venue_id FROM venues WHERE name = ?";
        String insertQuery = "INSERT INTO events (venue_id, name, description, event_date, image_data, category) VALUES (?, ?, ?, ?, ?, ?)";
        String fetchQuery = "SELECT * FROM events";

        try {
            // Get venue_id from selected venue name
            PreparedStatement pstVenue = con.prepareStatement(venueIdQuery);
            pstVenue.setString(1, selectedVenue);
            ResultSet rsVenue = pstVenue.executeQuery();
            String venueId = null;

            if (rsVenue.next()) {
                venueId = rsVenue.getString("venue_id");
            }

            // INSERT data
            PreparedStatement pstevent = con.prepareStatement(insertQuery);
            pstevent.setString(1, venueId);
            pstevent.setString(2, eventname);
            pstevent.setString(3, desc);
            pstevent.setString(4, date);
            InputStream is = new FileInputStream(new File(path2)); // path2 is image path from upload
            pstevent.setBlob(5, is);
            pstevent.setString(6, selectedCategory);
            pstevent.executeUpdate();

            // CLEAR inputs
            EventName.setText("");
            DescriptionField.setText("");
            event_date.setText("");
            EventImageContainer.setIcon(null);
            VenueComboBox.setSelectedIndex(-1); // Reset combo box selection
            CategoryComboBox.setSelectedIndex(-1);

            JOptionPane.showMessageDialog(null, "Data saved successfully!");

            // REFRESH JTable
            DefaultTableModel model = (DefaultTableModel) tbl_admindata.getModel();
            model.setRowCount(0); // Clear existing rows

            PreparedStatement pst = con.prepareStatement(fetchQuery);
            ResultSet rs = pst.executeQuery();

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getString("event_id"),
                    rs.getString("venue_id"), // If NULL, will show as blank
                    rs.getString("name"),
                    rs.getString("event_date"),
                    rs.getString("description"),
                    rs.getString("image_data"), // Optional: could display as placeholder
                    rs.getString("category")
                });
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }

    }//GEN-LAST:event_SubmitButtonActionPerformed

    private void EventNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EventNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EventNameActionPerformed

    private void UploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UploadButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        String path = f.getAbsolutePath();

        if (f != null) {
            imagePath = f.getAbsolutePath(); //Save image path for later use

            try {
                BufferedImage bi = ImageIO.read(f);
                Image img = bi.getScaledInstance(162, 233, Image.SCALE_SMOOTH);
                ImageIcon icon = new ImageIcon(img);
                EventImageContainer.setIcon(icon); // Set to main frame's image label
                path2 = path;
            } catch (IOException ex) {
                Logger.getLogger(AdminInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_UploadButtonActionPerformed

    private void deleteTicketsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteTicketsActionPerformed
        // TODO add your handling code here:
        int selectedRow = Tickets_Table.getSelectedRow();

    if (selectedRow >= 0) {
        String ticketId = Tickets_Table.getValueAt(selectedRow, 0).toString(); // ticket_id

        int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this ticket?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            String deleteQuery = "DELETE FROM tickets WHERE ticket_id = ?";

            try {
                // DELETE selected ticket
                PreparedStatement pstDelete = con.prepareStatement(deleteQuery);
                pstDelete.setString(1, ticketId);
                pstDelete.executeUpdate();

                JOptionPane.showMessageDialog(null, "Ticket deleted successfully!");

                // REFRESH JTable
                DefaultTableModel model = (DefaultTableModel) Tickets_Table.getModel();
                model.setRowCount(0); // Clear table rows

                String fetchQuery = "SELECT * FROM tickets";
                PreparedStatement pstFetch = con.prepareStatement(fetchQuery);
                ResultSet rs = pstFetch.executeQuery();

                while (rs.next()) {
                    model.addRow(new Object[]{
                        rs.getInt("ticket_id"),
                        rs.getInt("event_id"),
                        rs.getString("ticket_type"),
                        rs.getString("seat_section"),
                        rs.getDouble("price")
                    });
                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error deleting ticket: " + e.getMessage());
                e.printStackTrace();
            }
        }
    } else {
        JOptionPane.showMessageDialog(null, "Please select a ticket to delete.");
    }
    }//GEN-LAST:event_deleteTicketsActionPerformed

    private void clearTicketsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearTicketsActionPerformed
        // TODO add your handling code here:
        Event_Id.setSelectedIndex(-1);
        Ticket_Type.setSelectedIndex(-1);
        Seat_Section.setSelectedIndex(-1);

        // Clear text fields
        Ticket_Price.setText("");
        Tickets_Left.setText("");

        // Reset numeric spinner
        Total_Tickets.setValue(0);
    }//GEN-LAST:event_clearTicketsActionPerformed

    private void viewCustomerdataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewCustomerdataActionPerformed
        // TODO add your handling code here:
       DefaultTableModel model = (DefaultTableModel) tbl_customerdata.getModel();
    model.setRowCount(0);

    // SQL query to get all customer data
    String fetchQuery = "SELECT * FROM customers";

    try {
        PreparedStatement pst = con.prepareStatement(fetchQuery);
        ResultSet rs = pst.executeQuery();

        // Loop through the result set and add rows to the table
        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getInt("customer_id"),
                rs.getString("name"),
                rs.getString("email"),
                rs.getString("phone"),
                rs.getString("username"),
                rs.getString("password"),
                rs.getTimestamp("created_at")
            });
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error loading customer data: " + e.getMessage());
        e.printStackTrace(); // helpful for debugging
    }
    }//GEN-LAST:event_viewCustomerdataActionPerformed

    private void viewOrdersbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewOrdersbuttonActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tbl_ordersdata.getModel();
    model.setRowCount(0); // Clear previous rows

    String fetchQuery = "SELECT order_id, customer_id, order_date, total_amount, quantity, status, payment_method, payment_reference, cancelled_at FROM orders";

    try {
        PreparedStatement pst = con.prepareStatement(fetchQuery);
        ResultSet rs = pst.executeQuery();

        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getInt("order_id"),
                rs.getInt("customer_id"),
                rs.getTimestamp("order_date"),
                rs.getBigDecimal("total_amount"),
                rs.getInt("quantity"),
                rs.getString("status"),
                rs.getString("payment_method"),
                rs.getString("payment_reference"),
                rs.getTimestamp("cancelled_at")
            });
        }

    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Error loading order data: " + e.getMessage());
    }
    }//GEN-LAST:event_viewOrdersbuttonActionPerformed

    /**
     * @param args the command line arguments
     */
   private String imagePath;
   private UserInterface userint;
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner Capacity_Spinner;
    private javax.swing.JComboBox CategoryComboBox;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JTextArea DescriptionField;
    private javax.swing.JLabel EventImageContainer;
    private javax.swing.JTextField EventName;
    private javax.swing.JComboBox Event_Id;
    private javax.swing.JPanel Events;
    private javax.swing.JButton LogoutButton;
    private javax.swing.JButton Save_Button;
    private javax.swing.JButton SearchButton_Events;
    private javax.swing.JTextField SearchField_events;
    private javax.swing.JComboBox Seat_Section;
    private javax.swing.JButton SubmitButton;
    private javax.swing.JTextField Ticket_Price;
    private javax.swing.JComboBox Ticket_Type;
    private javax.swing.JTextField Tickets_Left;
    private javax.swing.JTable Tickets_Table;
    private javax.swing.JSpinner Total_Tickets;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JButton UploadButton;
    private javax.swing.JComboBox VenueComboBox;
    private javax.swing.JTextField VenueName_Field;
    private javax.swing.JButton VenueSubmit_Button;
    private javax.swing.JButton ViewButton;
    private javax.swing.JButton Viewbutton_tickets;
    private javax.swing.JButton clearEvents;
    private javax.swing.JButton clearTickets;
    private javax.swing.JButton clearVenues;
    private javax.swing.JButton deleteTickets;
    private javax.swing.JButton deleteVenue;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JTextField event_date;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField location_Field;
    private javax.swing.JTable tbl_admindata;
    private javax.swing.JTable tbl_customerdata;
    private javax.swing.JTable tbl_ordersdata;
    private javax.swing.JTable tbl_venuedata;
    private javax.swing.JButton updateTickets;
    private javax.swing.JButton updateVenue;
    private javax.swing.JButton viewCustomerdata;
    private javax.swing.JButton viewOrdersbutton;
    private javax.swing.JButton viewVenues;
    // End of variables declaration//GEN-END:variables
}
